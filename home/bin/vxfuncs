# functions gathered here to be sourced at once
# vim: ft=sh

# svn wrapper to not keep password savedd
function svu ()
{
  local _arg
  local _serv
  local _auth
  command svn --version >/dev/null || { echo "Subversion client svn seem not to be installed here: svn" ; return 1; }
  svn info >/dev/null &&  _serv=$(svn info | grep ^URL | sed 's|^.*http.*://||;s|/.*$||g')
  if [[ -z ${_serv} ]] 
  then 
    echo "No working copy here, checking arg against valid url"
    [[ "$@" =~ http.*svn.${CORPDOMAIN} ]] && _serv=svn.${CORPDOMAIN}
    [[ "$@" =~ http.*github.com ]] && _serv=github.com
  fi
  case ${_serv} in
      svn.${CORPDOMAIN})
          # _auth="--username ${CORPUSER} --password $(KRPWD ${CORPUSER}@${CORPDOMAIN}) " 
          _auth="--password $(KRPWD ${CORPUSER}@${CORPDOMAIN}) " 
      ;;
      github.com)
          _auth="--password  $(KRPWD githubsvn)" 
      ;;
      *)
         echo "Unknown server for working copy : $_serv Consider using direct svn command instead "; return 1 
  esac 
  echo Server to deal with detected: ${_serv} 
  _arg="$@"
  # echo '$@': $@ 
  # echo ARG: ${_arg} 
  # echo asis below
  printf '|%q| ' "$@"
  echo
  # echo asis above
  echo =========
  if [[ ! -z "${_arg}" ]] ;
  then
    # set -x
    svn "$@"  ${_auth}
    # set +x
  else
    svn
  fi
}

function vxyn ()
{
  local lhint=${1:-'Are you sure? (y/n)'}
  local REPLY=N
  local lRetVAR=${2:-VXRET}

  read -p "$lhint"  
  while [ ! "$REPLY" == "y" -a ! "$REPLY" == "n" ]
  do 
    read -p "Enter (y/n)?"  
  done
  if [ "$REPLY" == "y" ] 
  then
    echo yes
    return 0
  else 
    echo no
    return 1
  fi
# 0 means yes (success), 1 - no
} 

vagcd () {
  local sel
  sel=$(vagrant global-status | grep '^.......  ' | grep -v '^id '|fzf|awk '{print $NF}')
  [[ -n "$sel" ]] && cd "$sel" && ls 
}

function vagsnap () {
  local p n s r o SSN bpref src dst vagst
  [ -f Vagrantfile ]              || { echo No Vagrantfile in this dir; return 1; }
  vagst=$(vagrant status  | egrep  '\(virtualbox\)|\(lxc\)')
  [[ -n "$vagst" ]] || { echo Neither vbox nor lxc ; return 1; } 
  p=$({ egrep  '\(virtualbox\)|\(lxc\)' | awk '{print $NF}' | tr -d '()' ; }<<<"${vagst}")
  case $p in
    virtualbox)
        vagrant snapshot ${1:-list}
        ;;
    lxc)
        n=$({ egrep  '\(virtualbox\)|\(lxc\)' | awk '{print $1}' ; }<<<"${vagst}" )
        s=$({ egrep  '\(virtualbox\)|\(lxc\)' | awk '{print $2}' ; }<<<"${vagst}" )
        bpref=$(basename $(pwd))
        o=${1:-list}
        if [[ !  "${o}" == "list" ]]; then
          [[ ${s} == "running" ]] && { echo $n is running, you may want to stop it first; return 1; }
        fi;
        r=$(sudo find -L /var/lib/lxc  -maxdepth 1 -type d -type d  -regex "^/var/lib/lxc/${bpref}_${n}.*$")
        echo Content of $r dir:
        sudo find -L $r -maxdepth 1 -type d  -name rootfs\* | awk -F/ '{ print $NF }'
        case $o in
          save)
             SSN=${2:-"bak"}
             echo Saving ${SSN} snapshot
             dst=${r}/rootfs_${SSN}
             echo Saving ...
             vxyn "rsync -a --delete ${r}/rootfs/ ${dst}/ Sure to continue? " || return 1;
             echo No Progess bar here ...
             sudo  rsync -a --delete ${r}/rootfs/ ${dst}/ && echo Save Completed OK
             ;;
          restore)
             SSN=${2:-"NONE"}
             if [[ ! "$SSN" == "NONE"  ]] ; then
               sudo ls ${r}/rootfs_${SSN} || { echo NO ${SSN} is there; return 1; }
               src=${r}/rootfs_${SSN}
             else 
               src=$(sudo find $r -maxdepth 1 -type d -regex "^.*/rootfs.+$" | fzf)
             fi
             echo Restoring ${SSN} snapshot
             dst=${r}/rootfs
             vxyn "rsync -a --delete ${src}/ ${dst}/  Sure to continue? " || return 1;
             echo Restoring ...
             echo No Progess bar here ...
             sudo  rsync -a --delete ${src}/ ${dst}/ && echo Restore Completed OK
             ;;
          list)
             ## "Listing done above"
             ;;
          *)
             echo "Unkonwn operation VM type $o"
             ;;
        esac
        ;;
    *)
        echo "Unkonwn vag VM type $p"
        return 1
        ;;
  esac
}

svfm () {
  local c
  c=$(which vfm)
  sudo $c $*
}

lxa () {
  local sel
  sel=$(sudo lxc-ls -f | grep ' RUNNIN' | fzf | awk '{print $1}')
  [[ -n "$sel" ]] && sudo lxc-attach -n "$sel" 
}
