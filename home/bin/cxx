#!/usr/bin/env bash
#
# Creation of LXC container
# 

# This creates new instance of linux
# set -x
[ -z "$(ls -A)" ] ||  { echo "ERROR: Current dir supposed to be empty, but it is not"  ; exit 1; }

NMIN=1
NMAX=99
INUM=${1:?"No parameter specified, expected a numbier in range  $NMIN .. $NMAX"}
if ! [ "$INUM" -eq "$INUM" ] 2> /dev/null
then
    echo "$INUM does not look as integer"
    exit 1
else
    [[ "$INUM" -lt $NMIN || "$INUM" -gt $NMAX ]] && { echo "ERROR: $INUM is out of valid range $NMIN .. $NMAX"; exit 1; }
fi

# CXX_BOXNAME="godfryd/lxc-fedora-29"
# CXX_DISTKEY=${CXX_DISTKEY:-${CXX_DEFAULTDISTKEY}}
# CXX_HOSTNAME=${CXX_HOSTNAME:-${CXX_HNPFX}${IPT}}
# CXX_NWPFX=${CXX_NWPFX:-${VXMOSTNW:-${CXX_DEFAULTNWPFX}}}

CXX_DEFAULTBOXNAME="magneticone/centos-7"
CXX_DEFAULTNWPFX=10.7.7
CXX_DEFAULTDISTKEY=lco

CXX_BOXNAME=${CXX_BOXNAME:-${CXX_DEFAULTBOXNAME}}
CXX_NWPFX=${CXX_NWPFX:-${VXMOSTNW:-${CXX_DEFAULTNWPFX}}}
CXX_DISTKEY=${CXX_DISTKEY:-${CXX_DEFAULTDISTKEY}}

CXX_BRIDGE=most${CXX_NWPFX//./_}
CXX_HNPFX=${CXX_DISTKEY}$(echo $CXX_NWPFX | awk -F. '{ print $(NF) }')
IPT=$(( INUM + 100 ))
CXX_HOSTNAME=${CXX_HOSTNAME:-${CXX_HNPFX}${IPT}}
IPADDR=${CXX_NWPFX}.${IPT}
BRIDGENAME=$CXX_BRIDGE


## If necessary created associated bridge
## when destroying last lxc container, bridge may get removed automatically
## that is why doing this 
brctl show | grep "^$BRIDGENAME" || {
sudo brctl addbr $BRIDGENAME 
sudo ip address add ${CXX_NWPFX}.1/24 dev $BRIDGENAME
sudo ip link set $BRIDGENAME up 
}

cat >Vagrantfile<<EOV
# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|

  config.vm.define :${CXX_HOSTNAME} do |linux|
      linux.vm.box = "${CXX_BOXNAME}"
      # linux.trigger.before :up do |trg|
      #   trg.info = "Mounting shard before UP"
      #   trg.run = {path: "sharedmount.sh"}
      # end
      linux.trigger.after :up do |trg|
        trg.info = "Mounting shared after UP"
        trg.run = {path: "sharedmount.sh"}
      end
      linux.vm.hostname = "${CXX_HOSTNAME}"
      linux.vm.box_version = "${BOXVER:->=0}"
      linux.vm.network "private_network", ip: "${IPADDR}", lxc__bridge_name: "$BRIDGENAME",
      auto_config: false
      linux.vm.provision :shell, path: "bootstrap.sh"
      # config.ssh.keys_only = false
      # set auto_update to false, if you do NOT want to check the correct 
      # additions version when booting this machine
      linux.ssh.forward_agent = true
  end

end
EOV

# TODO Associative array of shares
# declare -A LXSHARE
# LXSHARE[/vz/shared]=home/shared

ATS=attachshare.sh
cat >sharedmount.sh <<EOMS
#!/usr/bin/env bash
LXC_SUBD=\$(ls /var/lib/lxc -1 | grep '_${CXX_HOSTNAME}_' | sort | tail -n 1)
notify-send "Mounting share"
if [[ -n "\$LXC_SUBD" ]] ; then 
  echo Creating $ATS script for mounting share
  echo '#!/usr/bin/env bash'>$ATS
  echo LXC_CFG=/var/lib/lxc/\${LXC_SUBD}/config>>$ATS
  echo 'sudo grep ^#DYN \${LXC_CFG} && { echo Share seems already added ; exit 1; }'>>$ATS
  echo 'sudo echo \#DYN_${CXX_HOSTNAME} dynamically added|sudo tee -a \${LXC_CFG}'>>$ATS
  echo $'echo \'lxc.mount.entry=/vz/shared home/shared none bind,create=dir 0 0\'|sudo tee -a \${LXC_CFG}'>>$ATS
  echo "vagrant reload" >>$ATS
  chmod 0755 $ATS
  echo Run $ATS to mount shared folder. Implies reload.
else 
  echo "Could not found LXC_PATH for $CXX_HOSTNAME container, Failed to create?"
fi
EOMS
chmod 0755 sharedmount.sh
cat >bootstrap.sh <<EOB
#!/usr/bin/env bash
useradd joker 
echo '%joker ALL=(ALL) NOPASSWD: ALL'>/etc/sudoers.d/joker
mkdir -p /home/joker/.ssh
echo 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAn9xxCkt0/rGNaAchLaufVoIcqMvEOFHjELOr9FVfUpGhQkeYcXanaQis2gt3KsGZMzNi8K9No88N6s6OT802yqptGKRZB2cBS+uPG8tpoKrRTUE+ZYYpBc0yO1C99HcqkGsYjVXJjltVnN5I/pc7h2SwU1Sd6caFMZSRQuveXeEz9HWSMwAJmlFb0R5q5zhMllL/Xg7g3O8v+UcaEEF+kRH6YvJmvQtJKkFsb9lII8IahIYxPhZcqaSZYF68lxh6qPwAH9gzrrK/KmFkxuMcNxO8E6lnbT7jiJyX+rDh0uu1N+q52VUgyhWbg0crRgWy1n6HXCgD2fW1skbv66C8yQ== default' >> /home/joker/.ssh/authorized_keys
chmod 0700 /home/joker/.ssh
chmod 0600 /home/joker/.ssh/authorized_keys
chown -R joker.joker /home/joker
sudo usermod -aG vagrant joker

mkdir -p /root/.ssh
echo 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAn9xxCkt0/rGNaAchLaufVoIcqMvEOFHjELOr9FVfUpGhQkeYcXanaQis2gt3KsGZMzNi8K9No88N6s6OT802yqptGKRZB2cBS+uPG8tpoKrRTUE+ZYYpBc0yO1C99HcqkGsYjVXJjltVnN5I/pc7h2SwU1Sd6caFMZSRQuveXeEz9HWSMwAJmlFb0R5q5zhMllL/Xg7g3O8v+UcaEEF+kRH6YvJmvQtJKkFsb9lII8IahIYxPhZcqaSZYF68lxh6qPwAH9gzrrK/KmFkxuMcNxO8E6lnbT7jiJyX+rDh0uu1N+q52VUgyhWbg0crRgWy1n6HXCgD2fW1skbv66C8yQ== default' >> /root/.ssh/authorized_keys
chmod 0700 /root/.ssh
chmod 0600 /root/.ssh/authorized_keys

# yum clean all
# yum -y update 
# yum -y install wget epel-release 
# yum -y install tcping vim 
EOB

# cat >sshconfinsert <<EOS
# #dynamically entered by $0
# Host $CXX_HOSTNAME
# 	User root
# 	Hostname ${IPADDR}

# EOS

echo "${IPADDR} $CXX_HOSTNAME">etchostsinsert

# sudo sed -i  "/^...EOFVAGRANT/ {
#          h
#          r etchostsinsert
#          g
#          N
#      }" /etc/hosts

###EOFVAGRANT
sudo sed -i -e '/^...BOFVAGRANT/r etchostsinsert' /etc/hosts


# # https://unix.stackexchange.com/a/193498/84561
# sudo ed -s /etc/hosts <<IN
# /^...EOFVAGRANT/-r etchostsinsert
# w
# q
# IN


# sed -i  "/^...EOFVAGRANT/ {
#          h
#          r sshconfinsert
#          g
#          N
#      }" ~/.ssh/config
# export VAGRANT_LOG=DEBUG
vagrant up --provider=lxc && echo $CXX_HOSTNAME has been prepared
# ls -lha
./attachshare.sh
ssh root@${CXX_HOSTNAME} "ip a| grep 'inet '"
ssh joker@${CXX_HOSTNAME} date 
echo $CXX_HOSTNAME created.

